import express, { Request, Response, NextFunction } from 'express';
import { ApolloServer } from 'apollo-server-express';
import compression from 'compression';
import { typeDefs, resolvers, sendMessage, publicarEvento, activeSubscriptions, _JSONBuffer } from './graphql/index.js';
import { WebSocketServer, WebSocket } from 'ws';
import { useServer } from 'graphql-ws/lib/use/ws';
import { makeExecutableSchema } from '@graphql-tools/schema';
import { Config, GetEnv } from './services/GetEnv.js';

class Nucleo {
  private _JSONBuffer: any = _JSONBuffer;
  public _activeSubscriptions = activeSubscriptions; // Mapear identificadores de suscripciones a clientes

  constructor() {
    // Ejemplo de uso
  }

  async startServer(Puerto: Config) {
    let TotalSuscripciones = 0;
    // Lista blanda de IPs permitidas para el puerto
    const whitelist = Puerto.whitelist;
    const ipWhitelistMiddleware = (req: Request, res: Response, next: NextFunction) => {
      const clientIp: any = req.ip;
      if (whitelist.includes(clientIp)) {
        next();
      } else {
        res.status(403).send('Forbidden');
      }
    };

    const port = Puerto.port;
    // Inicializo express
    const app = express();
    app.use(compression()); // Usar gzip
    app.use(ipWhitelistMiddleware);

    // Schema
    const schema = makeExecutableSchema({ typeDefs, resolvers });

    const apolloServer: any = new ApolloServer({
      schema,
      context: ({ req }) => {
        return {};
      },
    });

    // Inicia el servidor Apollo
    await apolloServer.start();

    // Aplica el middleware de Apollo Server a la aplicaciÃ³n Express
    apolloServer.applyMiddleware({ app, path: '/' });

    const server = app.listen(port, () => {
      // Crea el WebSocket
      const wsocket = new WebSocketServer({
        server,
        path: apolloServer.graphqlPath,
      });

      // Configurar ping/pong para keep-alive
      wsocket.on('connection', (socket: any, req) => {
        socket.isAlive = true;

        socket.on('pong', () => {
          socket.isAlive = true;
        });

        socket.on('close', () => {
          TotalSuscripciones -= 1;
          const clientId = socket.clientId;
          if (clientId) {
            this._activeSubscriptions.delete(clientId);
            console.log(`Cliente Desconectado: ${clientId}`);
            console.log(`Total de clientes suscritos ${TotalSuscripciones}`);
          }
        });

        // Inicializar cliente al conectarse
        socket.clientId = req.headers['sec-websocket-key']; // Usar la clave de WebSocket como ID Ãºnico
        this._activeSubscriptions.set(socket.clientId, { connectTime: Date.now() });
        TotalSuscripciones += 1;
        console.log(`Total de clientes suscritos ${TotalSuscripciones}`);
      });

      // Revisar el estado de las conexiones cada 30 segundos
      const interval = setInterval(() => {
        wsocket.clients.forEach((socket: any) => {
          if (!socket.isAlive) {
            return socket.terminate();
          }
          socket.isAlive = false;
          socket.ping();
        });
      }, 30000);

      useServer(
        {
          schema,
          onConnect: (ctx: any) => {
            try {
              TotalSuscripciones += 1;
              console.log(`Total de clientes suscritos ${TotalSuscripciones}`);

              // Establecer un temporizador para desconectar despuÃ©s de 3 minutos
              const timer = setTimeout(() => {
                ctx.connection.terminate(); // Desconectar el cliente
                console.log(`Cliente desconectado por inactividad: ${ctx.connection.remoteAddress}`);
              }, 3 * 60 * 1000); // 3 minutos en milisegundos

              // Guardar el temporizador en el contexto
              ctx.timer = timer;

            } catch (error) {
              console.error(error);
            }
          },
          onDisconnect: (ctx: any, msg, reason) => {
            TotalSuscripciones -= 1;
            clearTimeout(ctx.timer); // Limpiar el temporizador
            this._activeSubscriptions.delete(ctx); 
            console.log(Array.from(this._activeSubscriptions.values()));
            console.log(`Total de clientes suscritos ${TotalSuscripciones}`);
          },
          onSubscribe: async (context: any, message: any) => {
            context.IdAbonado = message.payload.variables.id;
            const DataControlConect = {
              ...message.payload.variables,
              TimerConet: Date.now(),
              TimerUltMensaje: Date.now()
            };
            this._activeSubscriptions.set(context.IdAbonado, DataControlConect);
            const validateArray = (element: any): boolean => Array.isArray(element);
            const Data: any = await _JSONBuffer.findDataById(DataControlConect);
            if (Data) {
              let currentIndex = 0;
              const sendArrayElement = async () => {
                if (currentIndex < Data.length) {
                  if (validateArray(Data)) {
                    const element = Data[currentIndex];
                    await _JSONBuffer.deleteData(_element => _element.id === element.id);
                    publicarEvento(element.id, element.message);
                    currentIndex++;
                  }
                } else {
                  publicarEvento(Data.id, Data.message);
                  clearInterval(intervalId);
                }
              };

              let intervalId: any;
              if (!validateArray(Data)) {
                intervalId = setInterval(sendArrayElement, 1000);
              } else {
                intervalId = setInterval(sendArrayElement, 3000);
              }
            }
            console.log('SuscripciÃ³n iniciada con payload:', DataControlConect);
          },
        },
        wsocket
      );

      console.log(`ðŸš€ Servidor listo en http://localhost:${port}${apolloServer.graphqlPath}`);
      console.log(`ðŸš€ Suscripciones listas en ws://localhost:${port}${apolloServer.graphqlPath}`);
    });
  }
} 
 
const _GetEnv: GetEnv = new GetEnv();
const PortInit: Config[] = _GetEnv.Init();
let _Nucleo: Nucleo = new Nucleo();
PortInit.forEach(Port => _Nucleo.startServer(Port));
